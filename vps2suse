#!/usr/bin/env sh

# Copyright 2021, U2FsdGVkX1 <U2FsdGVkX1@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

[ "$(id -u)" -ne 0 ] && echo "This script must be run as root" && exit 1

if command -v wget >/dev/null 2>&1; then
	download() { wget -O- "$mirror/$*" || wget -O- "http://download.opensuse.org/$*"; }
elif command -v curl >/dev/null 2>&1; then
	download() { curl -fL "$mirror/$*" || curl -fL "http://download.opensuse.org/$*"; }
else
	echo "This script needs curl or wget" >&2
	exit 2
fi

download_and_extract_bootstrap() {
	download "repositories/Virtualization:/containers:/images:/openSUSE-$version/$container/opensuse-$versionlower-image.$cpu_type-lxc.tar.xz.sha256" > sha256sums.txt
	filename=$(awk '{print $2}' sha256sums.txt)
	download "repositories/Virtualization:/containers:/images:/openSUSE-$version/$container/$filename" > "$filename"
	sha256sum -c sha256sums.txt || exit 1

	mkdir openSUSE
	tar -xpf "$filename" -C /openSUSE
	rm -f "$filename"

	if grep -E "^nameserver\s+127\." /etc/resolv.conf > /dev/null; then
		echo "nameserver 8.8.8.8" > /openSUSE/etc/resolv.conf
	else
		cp -Lp /etc/resolv.conf /openSUSE/etc
	fi
	find /openSUSE/etc/zypp/repos.d -name "*oss.repo" -print0 | xargs -0 sed -i "s#http://download.opensuse.org#$mirror#g"
	ld=$(find /openSUSE/lib/ /openSUSE/lib64/ -name "ld-linux*.so*" -print -quit)

	mount -t proc /proc /openSUSE/proc
	mount --make-rslave --rbind /sys /openSUSE/sys
	mount --make-rslave --rbind /dev /openSUSE/dev
	mount --make-rslave --rbind /run /openSUSE/run
	mount --bind / /openSUSE/mnt
	unset filename
}

save_root_pass() {
	grep "^root:" /etc/shadow > /openSUSE/root.passwd
	chmod 0600 /openSUSE/root.passwd
}

backup_old_files() {
	cp -Lp /etc/fstab /openSUSE/etc
	if [ -d /etc/ssh ]; then
		mkdir /openSUSE/ssh
		cp -Lp /etc/ssh/ssh_host* /openSUSE/ssh
	fi
	if [ -d /root/.ssh ]; then
		cp -Lpr /root/.ssh /openSUSE/key
	fi
}

delete_all() {
	# Delete *all* files from /
	find / \( ! -path '/dev/*' -and ! -path '/proc/*' -and ! -path '/sys/*' -and ! -path '/selinux/*' -and ! -path '/openSUSE/*' -and ! -name '/swapfile' \) -delete 2>/dev/null || true
}

chroot_exec() {
	$ld --library-path /openSUSE/lib64 \
	    /openSUSE/usr/bin/chroot /openSUSE /bin/bash -c "$*"
}

configure_chroot() {
	chroot_exec 'mkdir /mnt/etc'
	chroot_exec 'cp -rp /etc/{zypp,products.d,resolv.conf} /mnt/etc'
	chroot_exec 'zypper --gpg-auto-import-keys --root=/mnt ref'
}

install_packages() {
	patterns="enhanced_base bootloader yast2_basis yast2_server"
	packages="wicked kernel-default scout lvm2 man iptables iputils"
	chroot_exec "zypper -i --root=/mnt in -y -t pattern $patterns"
	/usr/sbin/update-ca-certificates
	# Here we actually want the words to split, therefore no quotes.
	zypper in -y $packages
	unset patterns packages
}

restore_root_pass() {
	# If the root password is not set, use vps2suse
	if grep -E -q '^root:.?:' /openSUSE/root.passwd; then
		echo "root:vps2suse" | chpasswd
	else
		sed -i '/^root:/d' /etc/shadow
		cat /openSUSE/root.passwd >> /etc/shadow
	fi
}

cleanup() {
	mv /openSUSE/etc/fstab /etc/fstab
	if [ -d /openSUSE/ssh ]; then
		chmod -R 0600 /openSUSE/ssh
		mv /openSUSE/ssh/* /etc/ssh
	fi
	if [ -d /openSUSE/key ]; then
		mv /openSUSE/key /root/.ssh
	fi
	
	awk '/\/openSUSE/ {print $2}' /proc/mounts | sort -r | xargs umount -nl || true
	rm -rf /openSUSE
}

configure_bootloader() {
	grep -q '^[[:space:]]*eth' /proc/net/dev && sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="/&net.ifnames=0 /' /etc/default/grub
	
	systemd-machine-id-setup && dracut -f --regenerate-all
	if [ -d /sys/firmware/efi ]; then
		efi_directory=$(df --type=vfat | tail -n1 | awk '{print $6}')
		/usr/sbin/grub2-install --recheck --removable --efi-directory="$efi_directory"
		cat > /etc/sysconfig/bootloader <<-EOF
			LOADER_TYPE="grub2-efi"
		EOF
	else
		root_dev=$(findmnt -no SOURCE /)
		root_dev=$(lsblk -npsro TYPE,NAME "$root_dev" | awk '$1 == "disk" {print $2}' | head -1)
		/usr/sbin/grub2-install --recheck --force "$root_dev"
		cat > /etc/sysconfig/bootloader <<-EOF
			LOADER_TYPE="grub2"
		EOF
	fi
	/sbin/update-bootloader
	unset efi_directory root_dev
}

configure_network() {
	for dev in $(ip -br l | awk '$2 == "UP" {split($1, r, "@"); print r[1]}'); do
		ip="$(ip -br a s "$dev" scope global | awk '{for(i=3;i<=NF;i++) printf "IPADDR%d=%s\n", i-3, $i}')"
		routes="$(ip -4 r s default; ip -6 r s default)"
		gateway="$(echo "$routes" | awk -v dev="$dev" '$5 == dev {printf "default %s\n", $3}')"

		cat > "/etc/sysconfig/network/ifcfg-$dev" <<-EOF
			STARTMODE=auto
			$ip
		EOF
		cat > "/etc/sysconfig/network/ifroute-$dev" <<-EOF
			$gateway
		EOF
	done
	unset dev ip routes gateway
}

setup_gateway_systemd_unit() {
	# Creates a systemd unit to persist a gateway ipv4 rule like:
	# default via xxx.xxx.xxx.xxx dev eth0
	if [ "$(ip -4 r | grep 'default via')" = "" ]; then 
		echo "No 'default via' rules found, skipping systemd unit setup."
		return
	fi
	gateway_route=$(ip -4 r | grep 'default via')
	script_dir="/root/.scripts"
	script_path="$script_dir/gateway-default.sh"
	systemd_unit_name="setup-gateway.service"
	systemd_unit_path="/etc/systemd/system/$systemd_unit_name"
	mkdir -p $script_dir
	cat > $script_path <<-EOF
		#!/usr/bin/env bash

		ip route add $gateway_route
	EOF
	chmod 700 $script_path
	cat > $systemd_unit_path <<-EOF
		[Unit]
		Description=Add static routes after network up
		After=network.target

		[Service]
		ExecStart=/usr/bin/bash $script_path
		Type=oneshot

		[Install]
		WantedBy=network.target
	EOF
	systemctl enable $systemd_unit_name
	if [ "$(systemctl is-enabled $systemd_unit_name)" = "enabled" ]; then 
	    echo "Gateway default route unit setup complete, check $script_path just in case for anything broken."
	else
		echo "Got an error trying to set up systemd gateway unit, might need to check it manually."
	fi
	unset gateway_route script_dir script_path systemd_unit_name systemd_unit_path
}

finalize() {
	if [ -d "sshd_config.d" ]; then
		cat > "/etc/ssh/sshd_config.d/PermitRootLogin.conf" <<-EOF
			PermitRootLogin yes
		EOF
	elif [ "$(grep -w "^PermitRootLogin yes" /etc/ssh/sshd_config)" = "" ]; then
		mkdir -p /etc/ssh/sshd_config.d
		cat > "/etc/ssh/sshd_config.d/PermitRootLogin.conf" <<-EOF
			PermitRootLogin yes
		EOF
	fi
	systemctl enable sshd

	cat <<-EOF
		Hi,
		your VM has successfully been reimaged with openSUSE.

		When you are finished with your post-installation, you'll need to reboot the VM the rough way:
		# sync ; reboot -f

		Then you'll be able to connect to your VM using SSH and to login using your old root password (or "vps2suse" if you didn't have a root password).
	EOF
}

cpu_type=$(uname -m)
version=Tumbleweed
mirror=http://download.opensuse.org
container=container
ld=
if [ "$cpu_type" = aarch64 ]; then
	container='container_ARM'
fi

while getopts "s:c:m:h:" opt; do
	case $opt in
	s)
		version="$OPTARG"
		case $version in
		*Leap-15.4|*Leap-15.5|*Leap-15.6)
			echo "Leap distributions above 15.3 are currently not supported. You can try installing 15.3 and upgrading manually afterwards."
			exit 1
			;;
		*Leap*) 
			# Fixes URI for the leap distribution.
			container="containers" ;;
		esac
		;;
	c)
		container="$OPTARG"
		;;
	m)
		mirror="$OPTARG"
		;;
	h)
		cat <<-EOF
			usage: ${0##*/} [options]

			  Options:
				-h                           Show help messages.
				-s system version            Set OS version (Default: Tumbleweed).
				-c container                 Set architecture type for the container image (Default: auto detect).
				-m mirror                    Set mirror address (Default: http://download.opensuse.org)..
		EOF
		exit 0
		;;
	:)
		printf "%s: option requires an argument -- '%s'\n" "${0##*/}" "$OPTARG" >&2
		exit 1
		;;
	?)
		printf "%s: invalid option -- '%s'\n" "${0##*/}" "$OPTARG" >&2
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))
versionlower=$(echo "$version" | awk -F- '{print tolower($1)}')

cd /
download_and_extract_bootstrap
save_root_pass
backup_old_files
delete_all
configure_chroot
install_packages
restore_root_pass
cleanup
configure_bootloader
configure_network
setup_gateway_systemd_unit
finalize
